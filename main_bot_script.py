import asyncio
import logging
import time
import sys
import os

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, BufferedInputFile
from aiogram.filters import CommandStart

from sheets_data_loader_and_analysis import report_week, compare_year_report

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

TOKEN = '8336463112:AAFa57WQU1Vi8PVWoyOHgSN_PVMhPt1INSQ'
dp = Dispatcher()

# --- HANDLERS ---

@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    user_id = message.from_user.id
    user_full_name = message.from_user.full_name

    buttons = [
        [InlineKeyboardButton(text="üìà –û—Ç—á–µ—Ç –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é", callback_data="report_week")],
        [InlineKeyboardButton(text="üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≥–æ—Ç–æ–≤–∫–∏ (2022-2025)", callback_data="compare_year_report")]
    ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    logging.info(f'[{time.strftime("%Y-%m-%d %H:%M:%S")}] User started bot: ID={user_id}, Name={user_full_name}')

    await message.reply(
        f'–ü—Ä–∏–≤–µ—Ç, {user_full_name}!\n'
        f'–Ø ‚Äî –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –æ –∑–∞–≥–æ—Ç–æ–≤–∫–µ –∑–µ—Ä–Ω–∞.\n'
        f'–ö–∞–∫–æ–π –æ—Ç—á–µ—Ç –Ω—É–∂–µ–Ω?',
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ [report_week]   

@dp.callback_query(F.data == "report_week")
async def callback_report_week(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ 'report_week'."""
    buttons = [
        [InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data="report_week")]
    ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    try:
        report_data = report_week()

        if 'error' in report_data:
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {report_data['error']}")
            return

        chart_bytes = report_data['chart_bytes']
        cahrt_1 = BufferedInputFile(chart_bytes, filename="weekly_report.png")

        metrics_data = report_data['metrics']
        current_delta_date = metrics_data['current_delta_date']
        ttl_trg_w = metrics_data['ttl_trg_w']
        Safonov_trg_w = metrics_data['Safonov_trg_w']
        Grushin_trg_w = metrics_data['Grushin_trg_w']
        Katishev_trg_w = metrics_data['Katishev_trg_w']

        await callback.message.answer_photo(
            photo=cahrt_1,
            caption=f"üìà –û—Ç—á–µ—Ç –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é: {current_delta_date}\n"
            f"\n–í—Å–µ–≥–æ –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é –∫—É–ø–∏–ª–∏: {ttl_trg_w} —Ç–æ–Ω–Ω.\n"
            f"–ò–∑ –Ω–∏—Ö:\n"
            f"- C–∞—Ñ–æ–Ω–æ–≤: {Safonov_trg_w}\n"
            f"- –ì—Ä—É—à–∏–Ω: {Grushin_trg_w}\n"
            f"- –ö–∞—Ç—ã—à–µ–≤: {Katishev_trg_w}\n",
            reply_markup=keyboard
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_report_week: {e}")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ [compare_year_report]   

@dp.callback_query(F.data == "compare_year_report")
async def callback_compare_year(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ 'compare_year_report'."""
    buttons = [
        [InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data="compare_year_report")]
    ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    try:
        chart_bytes = compare_year_report()

        if isinstance(chart_bytes, dict) and 'error' in chart_bytes:
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {chart_bytes['error']}")
            return

        cahrt_2 = BufferedInputFile(chart_bytes, filename="compare_year_report.png")

        await callback.message.answer_photo(
            photo=cahrt_2,
            caption=f"‚ÑπÔ∏è –ì—Ä–∞—Ñ–∏–∫ —Å–≥–ª–∞–∂–µ–Ω.\n"
            f"–ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç? - —Å–≥–ª–∞–∂–µ–Ω—ã –∫–æ–ª–µ–±–∞–Ω–∏—è.\n"
            f"–ó–∞—á–µ–º? - —Ç–∞–∫ –ª–µ–≥—á–µ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å.\n",
            reply_markup=keyboard
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_compare_year_report: {e}")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await callback.answer()

# --- –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê ---

async def main() -> None:
    bot = Bot(token=TOKEN)

    logging.info("–ó–∞–ø—É—Å–∫ Zagotovka_Report_Bot...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")

